#include<iostream>
#include<fstream>
#include <string>
#include<istream>
using namespace std;
void printboard();
void readinfile();
bool sepinarow(int i);
bool sepinacol(int j);
bool sepinabox(int i, int j);
void playgame();
void makemove();
bool boardissolved();
void eraseerror();
void backtracking();

/* This program is a sudoku game / sudoku solver that I made throughout the summer of 2017. Through this program, a person can play a game of sudoku, choosing from three levels of difficulty.
Additionally, tihs program can solve any possible sudoku board, as long as it is uploaded properly through a text file. Enjoy!
*/

char board[9][9];
char copyboard[9][9];
int row;
int col;

int main() {
	/* If the person wants to play, they will be led to the playgame function. If they don't want to play, they probably want to upload a file to solve.*/
	cout << "Hello! Do you wanna play? ";
	string initresponse;
	cin >> initresponse;
	while (initresponse != "yes" && initresponse != "Yes" && initresponse != "YES" && initresponse != "y" && initresponse != "Y"
		&& initresponse != "no" && initresponse != "No" && initresponse != "NO" && initresponse != "n" && initresponse != "N") {
		cout << endl << "Try again: ";
		cin >> initresponse;
	}
	if (initresponse == "yes" || initresponse == "Yes" || initresponse == "YES" || initresponse == "y" || initresponse == "Y") {
		playgame();
		// Until the board is solved, have the player make a move
		while (!boardissolved()) {
			makemove();
		}
		cout << endl << "Congrats! You win!";
	}
	if (initresponse == "no" || initresponse == "No" || initresponse == "NO" || initresponse == "N" || initresponse == "n") {
		cout << endl << "How about giving a file for my solver! Yes or no? ";
		string secondresponse;
		cin >> secondresponse;
		if (secondresponse == "yes" || secondresponse == "Yes" || secondresponse == "YES" || secondresponse == "y" || secondresponse == "Y") {
			// Read in the file that the player instructs the program to upload
			readinfile();
			// While the board isn't solved, keep using the backtracking algorithm
			while (!boardissolved()){
				backtracking();
			}
			// Now that the board is done, print it
			printboard();
			cout << endl << "Presto Chango";
		}
		// If they keep saying no, tell them to go away
		else if (secondresponse == "no" || secondresponse == "No" || secondresponse == "NO" || secondresponse == "n" || secondresponse == "N") {
			cout << endl << "Go away, then!";
		}
		else {
			// If they keep making mistakes, allow them to re-enter something
			while (secondresponse != "yes" && secondresponse != "YES" && secondresponse != "Yes" && secondresponse != "Y" && secondresponse != "y"
				&& secondresponse != "no" && secondresponse != "NO" && secondresponse != "No" && secondresponse != "N" && secondresponse != "n") {
				cout << endl << "Oops, try again. ";
				cin >> secondresponse;
				if (secondresponse == "yes" || secondresponse == "Yes" || secondresponse == "YES" || secondresponse == "y" || secondresponse == "Y") {
					readinfile();
				}
				if (secondresponse == "no" || secondresponse == "No" || secondresponse == "NO" || secondresponse == "N" || secondresponse == "n") {
					cout << endl << "Then why are you here!?";
				}
			}
		}
		cout << endl;
	}
	return 0;
}

void printboard() {
		int row = 0;
		int col = 0;
		int printing = 0;
		cout << "  ";
		// The code below is merely an instruction to how to print the board in a fancy way
		while (printing < 23) {
			cout << "-";
			printing++;
		}
		cout << endl;
		// Iterate through our array (the game board), printing the value of each index of the array
		for (row = 0; row < 9; row++) {
			cout << "  |";
			for (col = 0; col < 9; col++) {
				cout << board[row][col] << " ";
				if (col == 2 || col == 5 || col == 8) {
					cout << "| ";
				}
			}
			cout << endl;
			printing = 0;
			cout << "  ";
			while (printing < 23) {
				if (printing == 7 || printing == 15 || printing == 23 || printing == 0) {
					cout << "+";
					printing++;
				}
				if (row == 2 || row == 5 || row == 8) {
					cout << "=";
					printing++;
				}
				else {
					cout << " ";
					printing++;
				}
			}
			cout << endl;
		}
}

void readinfile() {
	cout << endl << "Welcome to the Sudoku Game! Please enter the file you want to open: ";
	ifstream ins;
	string filename;
	// Have the player enter a file name
	cin >> filename;
	filename = filename + ".txt";
	ins.open(filename);
	char readin;
	int answer = 0;
	// Place the elements of the file into the array (game board) one index at a time
	for (int row = 0; row < 9; row++) {
		for (int col = 0; col < 9; col++) {
			ins >> readin;
			if (readin > 48 && readin < 58) {
				board[row][col] = readin;
			}
			else {
				// If there's no number in a given index, print a space character
				board[row][col] = 32;
			}
		}
	}
	ins.close();
}

bool sepinacol(int col){
	int countone = 0;
	int counttwo = 0;
	int countthree = 0;
	int countfour = 0;
	int countfive = 0;
	int countsix = 0;
	int countseven = 0;
	int counteight = 0;
	int countnine = 0;
	// Go through all rows in the given column. If the # of occurrences of a given number is greater than one, the "separate in a column" rule is broken
	for (row = 0; row < 9; row++) {
		if (board[row][col] == '1') {
			countone++;
		}
		if (board[row][col] == '2') {
			counttwo++;
		}
		if (board[row][col] == '3') {
			countthree++;
		}
		if (board[row][col] == '4') {
			countfour++;
		}
		if (board[row][col] == '5') {
			countfive++;
		}
		if (board[row][col] == '6') {
			countsix++;
		}
		if (board[row][col] == '7') {
			countseven++;
		}
		if (board[row][col] == '8') {
			counteight++;
		}
		if (board[row][col] == '9') {
			countnine++;
		}
	}
	if (countone > 1 || counttwo > 1 || countthree > 1 || countfour > 1 ||
		countfive > 1 || countsix > 1 || countseven > 1 || counteight > 1 || countnine > 1) {
		return false;
	}
	else {
		return true;
	}
}

bool sepinarow(int row) {
	int countone = 0;
	int counttwo = 0;
	int countthree = 0;
	int countfour = 0;
	int countfive = 0;
	int countsix = 0;
	int countseven = 0;
	int counteight = 0;
	int countnine = 0;
	// Go through all columns in the given row. If the # of occurrences of a given number is greater than one, the "separate in a row" rule is broken
	for (col = 0; col < 9; col++) {
		if (board[row][col] == '1') {
			countone++;
		}
		if (board[row][col] == '2') {
			counttwo++;
		}
		if (board[row][col] == '3') {
			countthree++;
		}
		if (board[row][col] == '4') {
			countfour++;
		}
		if (board[row][col] == '5') {
			countfive++;
		}
		if (board[row][col] == '6') {
			countsix++;
		}
		if (board[row][col] == '7') {
			countseven++;
		}
		if (board[row][col] == '8') {
			counteight++;
		}
		if (board[row][col] == '9') {
			countnine++;
		}
	}
	if (countone > 1 || counttwo > 1 || countthree > 1 || countfour > 1 || 
			countfive > 1 || countsix > 1 || countseven > 1 || counteight > 1 || countnine > 1) {
		return false;
	}
	else {
		return true;
	}
}

bool sepinabox(int i, int j) {
	int countone = 0;
	int counttwo = 0;
	int countthree = 0;
	int countfour = 0;
	int countfive = 0;
	int countsix = 0;
	int countseven = 0;
	int counteight = 0;
	int countnine = 0;
	// Sort the array into 9 sectors, and start the iterating at the beginneing of each sector
	if (i < 3 && j < 3) {
		for (row = 0; row < 3; row++) {
			for (col = 0; col < 3; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	if (i < 3 && j > 2 && j < 6) {
		for (row = 0; row < 3; row++) {
			for (col = 3; col < 6; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	if (i < 3 && j > 5 && j < 9) {
		for (row = 0; row < 3; row++) {
			for (col = 6; col < 9; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	if (i > 2 && i < 6 && j < 3) {
		for (row = 3; row < 6; row++) {
			for (col = 0; col < 3; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	if (i > 2 && i < 6 && j > 2 && j < 6) {
		for (row = 3; row < 6; row++) {
			for (col = 3; col < 6; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	if (i > 2 && i < 6 && j > 5 && j < 9) {
		for (row = 3; row < 6; row++) {
			for (col = 6; col < 9; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	if (i > 5 && j < 3) {
		for (row = 6; row < 9; row++) {
			for (col = 0; col < 3; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	if (i > 5 && j > 2 && j < 6) {
		for (row = 6; row < 9; row++) {
			for (col = 3; col < 6; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	if (i > 5 && j > 5) {
		for (row = 6; row < 9; row++) {
			for (col = 6; col < 9; col++) {
				if (board[row][col] == '1') {
					countone++;
				}
				if (board[row][col] == '2') {
					counttwo++;
				}
				if (board[row][col] == '3') {
					countthree++;
				}
				if (board[row][col] == '4') {
					countfour++;
				}
				if (board[row][col] == '5') {
					countfive++;
				}
				if (board[row][col] == '6') {
					countsix++;
				}
				if (board[row][col] == '7') {
					countseven++;
				}
				if (board[row][col] == '8') {
					counteight++;
				}
				if (board[row][col] == '9') {
					countnine++;
				}
			}
		}
	}
	// If there's more than one of the same number in a box, mark it false
	if (countone > 1 || counttwo > 1 || countthree > 1 || countfour > 1 ||
		countfive > 1 || countsix > 1 || countseven > 1 || counteight > 1 || countnine > 1) {
		return false;
	}
	else {
		return true;
	}
}

void playgame() {
	cout << endl << "Easy, medium, or hard? ";
	string difficulty;
	// Let the user select a difficulty
	cin >> difficulty;
	// Within the difficulty the user selects, open the corresponding file and convert the numbers in the file into the sudoku board
	while (difficulty != "easy" && difficulty != "medium" && difficulty != "hard" && difficulty != "EASY" && difficulty != "MEDIUM"
			&& difficulty != "HARD" && difficulty != "E" && difficulty != "M" && difficulty != "H" && difficulty != "e" && difficulty != "m"
			&& difficulty != "h") {
			cout << endl << "Pardon? ";
			cin >> difficulty;
		}
		if (difficulty == "easy" || difficulty == "EASY" || difficulty == "E" || difficulty == "e") {
			ifstream ins;
			ins.open("easy.txt");
			char readin;
			int answer = 0;
			for (int row = 0; row < 9; row++) {
				for (int col = 0; col < 9; col++) {
					ins >> readin;
					if (readin > 48 && readin < 58) {
						board[row][col] = readin;
					}
					else {
						board[row][col] = ' ';
					}
				}
			}
			printboard();
		}
		else if (difficulty == "medium" || difficulty == "MEDIUM" || difficulty == "M" || difficulty == "m") {
			ifstream ins;
			ins.open("med.txt");
			char readin;
			int answer = 0;
			for (int row = 0; row < 9; row++) {
				for (int col = 0; col < 9; col++) {
					ins >> readin;
					if (readin > 48 && readin < 58) {
						board[row][col] = readin;
					}
					else {
						board[row][col] = ' ';
					}
				}
			}
			printboard();
		}
		else if (difficulty == "hard" || difficulty == "HARD" || difficulty == "H" || difficulty == "h") {
			ifstream ins;
			ins.open("hard.txt");
			char readin;
			int answer = 0;
			for (int row = 0; row < 9; row++) {
				for (int col = 0; col < 9; col++) {
					ins >> readin;
					if (readin > 48 && readin < 58) {
						board[row][col] = readin;
					}
					else {
						board[row][col] = ' ';
					}
				}
			}
		}
		// Make a "copy" of the board by iterating through the original board and copying values
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				copyboard[i][j] = board[i][j];
			}
		}
}

bool boardissolved() {
	// Iterate through each index of the array
	for (int row = 0; row < 9; row++) {
		for (int col = 0; col < 9; col++) {
			if (board[row][col] == ' ' || board[row][col] == '0' || board[row][col] == '-') {
				return false;
			}
		}
	}
	// If there's no space or 0 or dash in any of the indices of the array, the board is solved
	return true;
}

void makemove() {
	// Give the user the ability to erase an error
	eraseerror();
	// Have the user enter a row
	cout << endl << "Enter a row: ";
	int row = 0;
	string rowascii;
	cin >> rowascii;
	while (!(rowascii[0] > 48 && rowascii[0] < 58)) {
		// Get rid of the junk in the buffer if the character being read is not 0 through 9
		getline(cin, rowascii);
		cout << endl << "Try again: ";
		cin >> rowascii;
	}
	// Convert the ascii value of the row character into an integer
	row = rowascii[0] - 48;
	// Have the user enter a column
	cout << endl << "Enter a column: ";
	int col = 0;
	string colascii;
	cin >> colascii;
	while(!(colascii[0] > 48 && colascii[0] < 58)) {
		// Get rid of the junk in the buffer if the character being read is not 0 through 9
		getline(cin, colascii);
		cout << endl << "Try again: ";
		cin >> colascii;
	}
	// Convert the ascii value of the column character into an integer
	col = colascii[0] - 48;
	// Have the user enter a value
	cout << endl << "Enter a value: ";
	int value = 0;
	string asciivalue;
	cin >> asciivalue;
	while (!(asciivalue[0] > 48 && asciivalue[0] < 58)) {
		// Get rid of the junk in the buffer if the character being read is not 0 through 9
		getline(cin, asciivalue);
		cout << endl << "Try again: " << endl;
	}
	// Convert the 0-based array in the program to the 1-based array the user will want
	if (board[row - 1][col - 1] == ' ') {
		// If the board is empty, fill in the value
		board[row - 1][col - 1] = asciivalue[0];
		// If this move breaks a rule, reverse the fill-in
		if (!(sepinarow(row - 1) && sepinacol(col - 1) && sepinabox(row - 1, col - 1))) {
			board[row - 1][col - 1] = ' ';
		}
	}
	printboard();
}

void eraseerror() {
	cout << endl << "Type '0' if you made an error, and '1' if you didn't make an error: ";
	int choice;
	int row = 0;
	int col = 0;
	cin >> choice;
	if (choice == 0) {
		// Have the user enter the errored row
		cout << endl << "Enter the errored row: ";
		string erroredrow;
		cin >> erroredrow;
		// If the row # is not 0 through 9, clear the junk and try again
		while (!(erroredrow[0] > 48 && erroredrow[0] < 58)) {
			getline(cin, erroredrow);
			cout << endl << "Try again: ";
			cin >> erroredrow;
		}
		// Convert the row character to an integer
		row = erroredrow[0] - 48;
		// Have the user enter the errored column
		cout << endl << "Enter the errored column: ";
		string erroredcol;
		cin >> erroredcol;
		// If the column is not 0 through 9, clear the junk and try again
		while (!(erroredcol[0] > 48 && erroredcol[0] < 58)) {
			getline(cin, erroredcol);
			cout << endl << "Try again: ";
			cin >> erroredcol;
		}
		// Convert the column character to an integer
		col = erroredcol[0] - 48;
		// If the copy of the board is filled in that particular index, have them not be able to erase
		if (copyboard[row - 1][col - 1] != 32) {
			cout << endl << "Can't do that!" << endl;
		}
		// Else, let them erase
		else {
			board[row - 1][col - 1] = ' ';
		}
		printboard();
	}
}

struct Pair {
	int row;
	int col;
};

void backtracking() {
	// Make a struct to hold previous row and column values
	Pair prevLoc[81];
	// Start the struct size at 0
	int prevLocSize = 0;
	for (int i = 0; i < 9; i++) {
		for (int j = 0; j < 9; j++) {
			// If the value at a particular index is non-existent
			if (board[i][j] == 32) {
				// Go through the value of 1 through 9
				for (int value = 1; value < 11; value++) {
					// If you get to ten, it means none of the values fit
					if (value == 10) {
						board[i][j] = 32;
						// Erase the last row and column used so we can backtrack
						prevLocSize--;
						// Assign the row and col to the previous row and column
						i = prevLoc[prevLocSize].row;
						j = prevLoc[prevLocSize].col;
						// Assign the value to the previous value
						value = board[i][j] - 48;
						// Continue through the values
						continue;
					}
					board[i][j] = value + 48;
					// If one of the rules is broken, keep going through values
					if (!sepinarow(i) || !sepinacol(j) || !sepinabox(i, j)) {
						continue;
					}
					// Each time a placement works and it doesn't break rules, assign a new value in the struct
					prevLoc[prevLocSize].row = i;
					prevLoc[prevLocSize].col = j;
					prevLocSize++;
					// Now proceed through the columns, continuing along
					break;
				}
			}
		}
	}
}
